
import { z } from 'zod';

export const ServiceReportQuestionnaireSchema = z.object({
  reportedProblem: z.string().describe("The problem as reported by the customer."),
  symptomSummary: z.string().describe("Summary of the symptoms observed."),
  problemSummary: z.string().describe("A summary of the identified problem."),
  resolutionSummary: z.string().describe("A summary of how the issue was resolved."),
  verificationOfActivity: z.string().describe("How the resolution was verified (e.g., customer letter, test run)."),
  instrumentCondition: z.string().describe("The final condition of the instrument after service."),
  agreementType: z.string().describe("The type of service agreement (e.g., Warranty, Contract)."),
  laborHours: z.coerce.number().describe("The number of hours spent on labor."),
  signingPerson: z.string().describe("The name of the person signing the service report."),
  timeWorkStarted: z.any().describe("The date and time the engineer started the work."),
  timeWorkCompleted: z.any().describe("The date and time the engineer completed the work."),
  partsUsed: z.array(z.object({
    partNumber: z.string(),
    description: z.string(),
    quantity: z.coerce.number(),
    price: z.coerce.number(),
  })).describe('A list of parts that were used during the service.'),
});


export const CreateUserInputSchema = z.object({
    name: z.string().min(1, 'Name is required'),
    email: z.string().email('Invalid email address'),
    role: z.enum(['Engineer', 'Customer', 'Admin']),
    companyId: z.string().min(1, 'Company ID is required'),
});

export const UpdateUserInputSchema = z.object({
    id: z.string().min(1, 'User ID is required'),
    name: z.string().min(1, 'Name is required'),
    avatarUrl: z.string().url('Invalid URL for avatar').optional(),
});

export const CreateCustomerInputSchema = z.object({
    name: z.string().min(1, 'Customer name is required'),
    contactPerson: z.string().min(1, 'Contact person is required'),
    contactEmail: z.string().email('Invalid email address'),
    phone: z.string().min(1, 'Phone number is required'),
    address: z.string().min(1, 'Address is required'),
    companyId: z.string().min(1, 'Company ID is required'),
});

export const UpdateCustomerInputSchema = CreateCustomerInputSchema.extend({
    id: z.string().min(1, 'Customer ID is required'),
}).omit({ companyId: true });


export const DeleteCustomerInputSchema = z.object({
    customerId: z.string().min(1, 'Customer ID is required'),
});

const LifecycleEventSchema = z.object({
    date: z.any().optional(),
    note: z.string().min(1, "Note cannot be empty."),
    type: z.enum(['PPM', 'Corrective', 'Event']),
});

export const CreateAssetInputSchema = z.object({
  name: z.string().min(1, 'Asset name is required.'),
  model: z.string().min(1, 'Model is required.'),
  serialNumber: z.string().min(1, 'Serial number is required.'),
  customerId: z.string().min(1, 'A customer must be selected.'),
  location: z.string().min(1, 'Location is required.'),
  installationDate: z.any().transform((val) => (val ? new Date(val) : new Date())),
  companyId: z.string().min(1, 'Company ID is required.'),
  ppmFrequency: z.coerce.number().optional(),
  lastPpmDate: z.any().optional(),
  lifecycleNotes: z.array(LifecycleEventSchema).optional(),
  status: z.enum(['Operational', 'Down', 'Maintenance']),
  purchaseDate: z.any().optional(),
  vendor: z.string().optional(),
  warrantyExpiry: z.any().optional(),
});

export const UpdateAssetInputSchema = CreateAssetInputSchema.extend({
    id: z.string().min(1, 'Asset ID is required'),
}).omit({ companyId: true });

export const DeleteAssetInputSchema = z.object({
    assetId: z.string().min(1, 'Asset ID is required'),
});

export const UpdateCompanyInputSchema = z.object({
    id: z.string().min(1, 'Company ID is required'),
    name: z.string().min(1, 'Company name is required'),
    address: z.string().optional(),
    phone: z.string().optional(),
    email: z.string().email('Invalid email address').optional(),
    logoUrl: z.string().optional(),
});

export const CreateResourceInputSchema = z.object({
  title: z.string().min(1, 'Title is required'),
  equipment: z.string().min(1, 'Equipment name is required'),
  description: z.string().min(1, 'Description is required'),
  category: z.string().min(1, 'Category is required'),
  type: z.enum(['Manual', 'Guide', 'Procedure', 'Reference', 'Standard']).optional(),
  pages: z.coerce.number().min(1, 'Number of pages is required'),
  version: z.string().min(1, 'Version is required'),
});

export const ResourceSchema = CreateResourceInputSchema.extend({
  id: z.string().optional(), // ID is generated by Firestore
  uploaderName: z.string().min(1, "Uploader's name is required"),
  companyId: z.string().min(1, 'Company ID is required'),
  updatedDate: z.string().min(1, 'Updated date is required'),
  fileUrl: z.string().url().or(z.string().startsWith('#')), // Placeholder or URL
});

export const CreateSparePartInputSchema = z.object({
  name: z.string().min(1, 'Part name is required'),
  partNumber: z.string().min(1, 'Part number is required'),
  quantity: z.coerce.number().min(0, 'Quantity cannot be negative'),
  location: z.string().min(1, 'Location is required'),
  assetModel: z.string().min(1, 'Asset model is required'),
  companyId: z.string().min(1, 'Company ID is required'),
});

export const UpdateSparePartInputSchema = z.object({
  id: z.string().min(1, 'Part ID is required'),
  quantity: z.coerce.number().min(0, 'Quantity cannot be negative'),
});

export const DeleteSparePartInputSchema = z.object({
    partId: z.string().min(1, 'Part ID is required'),
});
